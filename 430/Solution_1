/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    public Node() {}

    public Node(int _val,Node _prev,Node _next,Node _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
    public Node flatten(Node head) {
        if(head==null||(head.next==null&&head.child==null)) {
            return head;
        }
        Node cur = head;
        Stack<Node> stack = new Stack<>();
        while(cur.next!=null||cur.child!=null||!stack.isEmpty()) {
            if(cur.child!=null) {
                if(cur.next!=null) {
                    stack.push(cur.next);
                }
                cur.next = cur.child;
                cur.child = null;
                cur.next.prev = cur;
            } else if(cur.next==null&&!stack.isEmpty()) {
                Node tmp = stack.pop();
                cur.next = tmp;
                tmp.prev = cur;
            }
            cur = cur.next;
        }
        return head;
    }
}
//Time:O(n), Space:O(n)
