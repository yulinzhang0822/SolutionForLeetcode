class Solution {
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        int N = pre.length;
        if (N == 0) return null;
        TreeNode root = new TreeNode(pre[0]);
        if (N == 1) return root;

        int L = 0;
        for (int i = 0; i < N; ++i) {
            if (post[i] == pre[1]) {
                L = i+1;
            }
        }

        root.left = constructFromPrePost(Arrays.copyOfRange(pre, 1, L+1),
                                         Arrays.copyOfRange(post, 0, L));
        root.right = constructFromPrePost(Arrays.copyOfRange(pre, L+1, N),
                                          Arrays.copyOfRange(post, L, N-1));
        return root;
    }
}

Algorithm:
Let's say the left branch has LL nodes. We know the head node of that left branch is pre[1], but it also occurs last 
in the postorder representation of the left branch. So pre[1] = post[L-1] (because of uniqueness of the node values.) 
Hence, L = post.indexOf(pre[1]) + 1.

Now in our recursion step, the left branch is represnted by pre[1 : L+1] and post[0 : L], while the right branch is 
represented by pre[L+1 : N] and post[L : N-1].
